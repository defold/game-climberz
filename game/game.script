local monarch = require "monarch.monarch"

go.property("gravity", vmath.vector3(0, -10000, 0))
go.property("ground_speed", 450)
go.property("jump_speed", 1800)
go.property("pickup_chance", 2)
go.property("double_danger_chance", 2)
go.property("safe_radius", 180)

-- distance between the platforms
local PLATFORM_SPACING = 250
-- height of a platform (used to set the initial position of the hero)
local PLATFORM_HEIGHT = 48
-- width of the screen, as set in game.project
local SCREEN_WIDTH = tonumber(sys.get_config("display.width"))
-- time it should take to move the platforms when the hero is climbing a ladder
local PLATFORM_MOVE_DURATION = 0.3
-- we don't want things too close to the edge
local MARGIN = 100

local SAVE_DATA_PATH = sys.get_save_file(sys.get_config("project.title"), "savedata")

-- generate a random horizontal position on the screen
-- with an optional margin to the screen edges
local function random_x(margin)
	margin = margin or MARGIN
	return math.random(margin - (SCREEN_WIDTH / 2), (SCREEN_WIDTH / 2) - margin)
end

-- one in x chance
-- will return 1 if condition is met, otherwise 0
local function one_in(chance)
	return math.random(1, chance) == chance and 1 or 0
end

-- add dangers on a platform
-- the dangers will be created using a factory and the ids of the
-- dangers will be stored in the platform data table
local function add_dangers(self, platform)
	local dangers = 1 + one_in(self.double_danger_chance)
	for i=1,dangers do
		local danger_id = factory.create("factories#danger", vmath.vector3(random_x(), PLATFORM_HEIGHT, 0))
		platform.dangers[danger_id] = true
		msg.post(danger_id, "set_parent", { parent_id = platform.ground_id, keep_world_transform = 0 })
	end
end

-- remove all dangers from a platform
-- the game objects will be deleted and the dangers will be removed
-- from the platform data
local function remove_dangers(self, platform)
	for danger_id,_ in pairs(platform.dangers) do
		go.delete(danger_id)
		platform.dangers[danger_id] = nil
	end
end

-- add pickups to a platform
-- the pickups will be created using a factory and the ids of the
-- pickups will be stored in the platform data table and in a separate list
local function add_pickups(self, platform)
	local pickups = one_in(self.pickup_chance)
	for i=1,pickups do
		local pickup_id = factory.create("factories#pickup", vmath.vector3(random_x(), 180, 0))
		platform.pickups[pickup_id] = true
		self.pickups[pickup_id] = platform
		msg.post(pickup_id, "set_parent", { parent_id = platform.ground_id, keep_world_transform = 0 })
	end
end

-- remove a pickup
-- the game object will be deleted and the pickup will be removed
-- from the platform data and from the list of all pickups
local function remove_pickup(self, pickup_id)
	go.delete(pickup_id)
	local platform = self.pickups[pickup_id]
	platform.pickups[pickup_id] = nil
	self.pickups[pickup_id] = nil
end

-- remove all pickups on a platform
local function remove_pickups(self, platform)
	while next(platform.pickups) do
		remove_pickup(self, next(platform.pickups))
	end
end

-- randomize the content of a platform
-- will generate dangers and pickups and randomize their positions
-- along with the ladder position
-- the function will also ensure that there is a certain amount of spacing
-- between dangers and the ladder to make it easier to play the game
local function randomize_platform(self, platform, dangers, pickups)
	if dangers then add_dangers(self, platform) end
	if pickups then add_pickups(self, platform) end
	
	-- create a list of things that we should randomise positions for
	local things = { platform.ladder_id }
	for danger_id,_ in pairs(platform.dangers) do table.insert(things, danger_id) end
	
	-- let's start from the left edge and continuously place things, one-by-one from
	-- left to right with a random spacing that respects the specified safe radius
	-- between things
	local count = #things
	local x = MARGIN
	for i=1,count do
		-- the amount of space on the platform that is reserved for the safety radius
		-- of the things left to place
		local reserved_space = (self.safe_radius * (count - i))
		
		-- the amount of available space on the platform to place the next thing
		local available_space = SCREEN_WIDTH - MARGIN - x - reserved_space

		-- random position within the available space
		x = x + math.random(0, available_space)

		-- position a random thing
		local id = table.remove(things, math.random(1, #things))
		local pos = go.get_position(id)
		pos.x = x - SCREEN_WIDTH / 2
		go.set_position(pos, id)
		
		x = x + self.safe_radius
	end
end

local function update_score(self)
	self.save_data.best_score = math.max(self.save_data.best_score, self.score)
	sys.save(SAVE_DATA_PATH, self.save_data)
	msg.post("ui", "update_score", { score = self.score, best_score = self.save_data.best_score })
end

local function show_instructions(self)
	msg.post("instructions", "enable")
	msg.post("hand", "enable")
	go.set("hand#sprite", "tint.w", 1)
	go.animate("hand#sprite", "tint.w", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INOUTCUBIC, 0.4)
end

local function hide_instructions(self)
	msg.post("instructions", "disable")
	msg.post("hand", "disable")
	go.cancel_animations("hand#sprite", "tint.w")
end

-- start a new game
-- remove any previously created pickups and dangers on the platforms
-- randomize ladder positions, generate new pickups and dangers and
-- position the hero
local function new_game(self)
	self.score = 0
	update_score(self)
	show_instructions(self)

	-- cleanup of old dangers and pickups
	for _,platform in pairs(self.platforms) do
		remove_dangers(self, platform)
		remove_pickups(self, platform)
	end
	
	-- position and generate the platforms
	for i = 1, 7 do
		local ground_id = go.get_id("ground" .. i)
		local ladder_id = go.get_id("ladder" .. i)
		local platform = { ground_id = ground_id, ladder_id = ladder_id, pickups = {}, dangers = {} }
		self.platforms[i] = platform
		go.set_position(vmath.vector3(SCREEN_WIDTH / 2, PLATFORM_SPACING * i, 0), ground_id)
		
		-- randomize the position of the ladder and for all platforms except the first one
		-- potentially also the add dangers and pickups
		local dangers = i > 1
		local pickups = i > 1
		randomize_platform(self, platform, dangers, pickups)
	end
	
	-- position the hero on top of the bottom most platform
	go.set_position(vmath.vector3(200, PLATFORM_SPACING + PLATFORM_HEIGHT, 0), "hero")
end

function init(self)
	local data = monarch.data(hash("game"))
	local player = data and data.player or "green"

	sprite.play_flipbook("hero#sprite", player .. "_player")
	
	msg.post(".", "acquire_input_focus")
	msg.post("@render:/", "clear_color", { color = vmath.vector4(0xaa / 0xff, 0xea / 0xff, 1.0, 1.0) })
		
	-- the velocity of the hero
	self.velocity = vmath.vector3(self.ground_speed, 0, 0)
	
	-- the platforms each consist of a ground and ladder game object
	-- they are defined in game.collection
	-- the game object ids are sequentially named ground1, ladder1, ..., ground6, ladder6
	-- the list will be kept ordered so that the first element will represent the platform
	-- at the bottom of the screen while the last element represents the platform at
	-- the top of the screen
	self.platforms = {}

	-- we also keep a separate list of created pickups
	-- pickups are created per platform
	-- the list of pickups has the pickup ids as keys and the platforms they belong to
	-- as values (ie the same platform objects as in the platforms list above)
	-- this allows us to quickly look up which platform a pickup belongs to when it is
	-- collected by the player
	self.pickups = {}
	
	self.score = 0
	self.save_data = sys.load(SAVE_DATA_PATH) or {}
	self.save_data.best_score = self.save_data.best_score or 0
	
	new_game(self)
end

function update(self, dt)
	-- ignore any movement logic while the hero is dying
	if self.dying then
		return
	end

	-- apply gravity and move the hero unless the hero is on a ladder		
	if not self.ladder_contact then
		-- apply gravity
		self.velocity = self.velocity + self.gravity * dt
		
		-- move the hero
		-- if the hero has moved outside the left or right edge of the
		-- the screen the horizontal component of the velocity is reversed
		-- also flip the hero sprite
		local pos = go.get_position()
		pos = pos + self.velocity * dt
		if not self.animating then
			if pos.x > SCREEN_WIDTH then
				pos.x = SCREEN_WIDTH
				self.velocity.x = -self.velocity.x
				sprite.set_hflip("#sprite", true)
			elseif pos.x < 0 then
				pos.x = 0
				self.velocity.x = -self.velocity.x
				sprite.set_hflip("#sprite", false)
			end
		end
		go.set_position(pos)
	end
	
	-- reset volatile state
	self.can_jump = false
	self.ladder_contact = false
end

function on_message(self, message_id, message, sender)
	-- react to collisions unless we're dying
	if message_id == hash("contact_point_response") and not self.dying then
		-- hero standing on a platform
		if message.group == hash("ground") then
			-- ignore collisions from below (ie while climbing)
			if message.normal.y == 1 then
				-- resolve the collision by moving the hero out of the collision object
				-- also reset the vertical component of the velocity
				go.set_position(go.get_position() + message.normal * message.distance)
				self.velocity.y = 0
				self.can_jump = true
			end
		-- colliding with a danger - die!
		elseif message.group == hash("danger") then
			self.dying = true
			sound.play("sounds#die")
			-- create a custom easing function that makes the player "jump" up and then quickly fall down
			local easing = vmath.vector({ -0.1, -0.15, -0.175, -0.2, -0.175, -0.15, -0.1, 0.0, 0.125, 0.25, 0.5, 0.75, 1.0 })
			go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, -200, easing, 0.5, 0, function()
				self.dying = false
				new_game(self)
			end)
		-- colliding with a ladder - climb!
		elseif message.group == hash("ladder") then
			self.velocity.y = 0
			self.ladder_contact = true
			if not self.animating then
				self.animating = true
				sound.play("sounds#climb")
				for i,platform in ipairs(self.platforms) do
					local ground_id = platform.ground_id
					local ladder_id = platform.ladder_id
					local ground_pos = go.get_position(ground_id)
					-- animate the platform downwards
					-- if the platform was animated outside of the view it will
					-- be moved to the top
					go.animate(ground_id, "position.y", go.PLAYBACK_ONCE_FORWARD, ground_pos.y - PLATFORM_SPACING, go.EASING_LINEAR, PLATFORM_MOVE_DURATION, 0, function()
						self.animating = false
						-- if the platform was moved below the bottom edge of the screen:
						-- move it to the top of the platforms. we also move it to the
						-- end of the list of platforms to keep the order intact
						-- Some additional cleanup:
						-- * remove any pickups on the platform
						-- * remove any dangers on the platform
						-- * randomize the platform again
						if go.get_position(ground_id).y < 0 then
							local pos = go.get_position(ground_id)
							pos.y = pos.y + #self.platforms * PLATFORM_SPACING
							go.set_position(pos, ground_id)
							remove_pickups(self, platform)
							remove_dangers(self, platform)
							randomize_platform(self, platform, true, true)
							table.insert(self.platforms, table.remove(self.platforms, i))
						end
					end)
				end
			end
		-- colliding with a pickup - remove it!
		elseif message.group == hash("pickup") then
			self.score = self.score + 1
			sound.play("sounds#pickup")
			update_score(self)
			particlefx.play(msg.url(nil, message.other_id, "particlefx"))
			remove_pickup(self, message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") or action_id == hash("jump") then
		if action.pressed and self.can_jump then
			hide_instructions(self)
			self.velocity.y = self.jump_speed
		end
	end
end
